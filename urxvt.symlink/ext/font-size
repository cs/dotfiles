#!/usr/bin/env perl
#
# On-the-fly adjusting of the font size in urxvt
#
# Copyright (c) 2008 David O'Neill
#               2012 Noah K. Tilton <noahktilton@gmail.com>
#               2012-2013 Jan Larres <jan@majutsushi.net>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to
# deal in the Software without restriction, including without limitation the
# rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
# sell copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
# IN THE SOFTWARE.
#
# URL: https://github.com/majutsushi/urxvt-font-size
#
# Based on:
# https://github.com/dave0/urxvt-font-size
# https://github.com/noah/urxvt-font
#

#:META:X_RESOURCE:%.step:interger:font size increase/decrease step

=head1 NAME

font-size - interactive font size setter

=head1 USAGE

Put the font-size script into $HOME/.urxvt/ext/ and add it to the list
of enabled perl-extensions in ~/.Xresources:

  URxvt.perl-ext-common: ...,font-size

Add some keybindings:

  URxvt.keysym.C-Up:     font-size:increase
  URxvt.keysym.C-Down:   font-size:decrease

Supported functions:

=over 2

=item * increase/decrease:

      increase or decrease the font size of the current terminal.

=back

You can also change the step size that the script will use to increase
the font size:

  URxvt.font-size.step: 4

The default step size is 1. This means that with this setting a
size change sequence would be for example 8->12->16->20 instead of
8->9->10->11->12 etc. Please note that many X11 fonts are only
available in specific sizes, though, and odd sizes are often not
available, resulting in an effective step size of 2 instead of 1
in that case.
=cut

use strict;
use warnings;

my %escapecodes = (
  "font"           => 710,
  "boldFont"       => 711,
  "italicFont"     => 712,
  "boldItalicFont" => 713
);

my %defaultFonts = (
  "font"           => "undef",
  "boldFont"       => "undef",
  "italicFont"     => "undef",
  "boldItalicFont" => "undef"
);

my %currentFonts = %defaultFonts;

sub on_start {
  my ($self) = @_;

  foreach my $type (qw(font boldFont italicFont boldItalicFont)) {
    $defaultFonts{$type} = $self->x_resource($type) || "undef";
    # Use default font if current font is undefined ...
    if ($currentFonts{$type} eq "undef") {
      $currentFonts{$type} = $defaultFonts{$type};
    }
  }

  set_fonts($self, %currentFonts);
}

sub on_action {
  my ($self, $action) = @_;

  my $step = $self->x_resource("%.step") || 1;

  foreach my $term (urxvt::termlist) {
    if ($action eq "increase") {
      change_font_size($term,  $step);
    } elsif ($action eq "decrease") {
      change_font_size($term, -$step);
    } elsif ($action eq "reset") {
      set_fonts($term, %defaultFonts);
    }
  }
}

sub change_font_size {
  my ($term, $change) = @_;

  my @newfonts = ();

  my $curres = $term->resource('font');
  if (!$curres) {
    $term->scr_add_lines("\r\nWarning: No font configured, trying a default.\r\nPlease set a font with the 'URxvt.font' resource.");
    $curres = "fixed";
  }
  my @curfonts = split(/\s*,\s*/, $curres);

  my $basefont = shift(@curfonts);
  my ($newbasefont, $newbasesize) = handle_font($term, $basefont, $change, 0);
  push @newfonts, $newbasefont;

  # Only adjust other fonts if base font changed
  if ($newbasefont ne $basefont) {
    foreach my $font (@curfonts) {
      my ($newfont, $newsize) = handle_font($term, $font, $change, $newbasesize);
      push @newfonts, $newfont;
    }
    my $newres = join(",", @newfonts);
    apply_new_font($term, $newres, "font");

    handle_type($term, "boldFont",       $change, $newbasesize);
    handle_type($term, "italicFont",     $change, $newbasesize);
    handle_type($term, "boldItalicFont", $change, $newbasesize);
  }
}

sub set_fonts {
  my ($term, %fonts) = @_;
  foreach my $type (qw(font boldFont italicFont boldItalicFont)) {
    apply_new_font($term, $fonts{$type}, $type, 0);
  }
}

sub handle_type {
  my ($term, $type, $change, $basesize) = @_;

  my $curres = $term->resource($type);
  if (!$curres) {
      return;
  }
  my @curfonts = split(/\s*,\s*/, $curres);
  my @newfonts = ();

  foreach my $font (@curfonts) {
    my ($newfont, $newsize) = handle_font($term, $font, $change, $basesize);
    push @newfonts, $newfont;
  }

  my $newres = join(",", @newfonts);
  apply_new_font($term, $newres, $type);
}

sub handle_font {
  my ($term, $font, $change, $basesize) = @_;

  my $newfont;
  my $newsize;
  my $prefix = 0;

  if ($font =~ /^\s*x:/) { $font =~ s/^\s*x://; $prefix = 1; }

  if ($font =~ /^\s*(\[.*\])?xft:/) {
    ($newfont, $newsize) = change_font_size_xft($term, $font, $change, $basesize);
  } else {
    # Only XFT fonts are supported ...
  }

  if ($prefix) { $newfont = "x:$newfont"; }
  return ($newfont, $newsize);
}

sub change_font_size_xft {
  my ($term, $fontstring, $change, $basesize) = @_;

  my @pieces   = split(/:/, $fontstring);
  my @resized  = ();
  my $size     = 0;
  my $new_size = 0;

  foreach my $piece (@pieces) {
    if ($piece =~ /^(?:(?:pixel)?size=|[^=-]+-)(\d+(\.\d*)?)$/) {
      $size = $1;

      if ($basesize != 0) {
        $new_size = $basesize;
      } else {
        $new_size = $size + $change
      }

      $piece =~ s/(=|-)$size/$1$new_size/;
    }
    push @resized, $piece;
  }

  my $resized_str = join(":", @resized);

  # don't make fonts too small
  if ($new_size >= 6) {
    return ($resized_str, $new_size);
  } else {
    if ($basesize == 0) {
      $term->scr_bell;
    }
    return ($fontstring, $size);
  }
}

sub apply_new_font {
  my ($term, $newfont, $type) = @_;

  if ($newfont ne "undef") {
    # Set the new font in $term ...
    $term->cmd_parse("\033]" . $escapecodes{$type} . ";" . $newfont . "\033\\");

    # Current font has changed. Save it in $currentFonts for new windows ...
    $currentFonts{$type} = $newfont;
  }
}
